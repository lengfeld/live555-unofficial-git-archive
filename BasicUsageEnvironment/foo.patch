diff -ur live/BasicUsageEnvironment/BasicTaskScheduler.cpp live-select/BasicUsageEnvironment/BasicTaskScheduler.cpp
--- live/BasicUsageEnvironment/BasicTaskScheduler.cpp   2005-01-13 13:11:01.000000000 +0400
+++ live-select/BasicUsageEnvironment/BasicTaskScheduler.cpp    2005-01-22 00:45:48.000000000 +0400
@@ -26,6 +26,7 @@
 #include <sys/select.h>
 #include <unix.h>
 #endif
+#include <errno.h>
 
 ////////// BasicTaskScheduler //////////
 
@@ -46,29 +47,33 @@
 #endif
 
 void BasicTaskScheduler::SingleStep(unsigned maxDelayTime) {
-  fd_set readSet = fReadSet; // make a copy for this select() call
+  fd_set readSet; // make a copy for this select() call
   
   DelayInterval const& timeToDelay = fDelayQueue.timeToNextAlarm();
-  struct timeval tv_timeToDelay;
-  tv_timeToDelay.tv_sec = timeToDelay.seconds();
-  tv_timeToDelay.tv_usec = timeToDelay.useconds();
-  // Very large "tv_sec" values cause select() to fail.
-  // Don't make it any larger than 1 million seconds (11.5 days)
-  const long MAX_TV_SEC = MILLION;
-  if (tv_timeToDelay.tv_sec > MAX_TV_SEC) {
-    tv_timeToDelay.tv_sec = MAX_TV_SEC;
-  }
-  // Also check our "maxDelayTime" parameter (if it's > 0):
-  if (maxDelayTime > 0 &&
-      (tv_timeToDelay.tv_sec > (long)maxDelayTime/MILLION ||
-       (tv_timeToDelay.tv_sec == (long)maxDelayTime/MILLION &&
-       tv_timeToDelay.tv_usec > (long)maxDelayTime%MILLION))) {
-    tv_timeToDelay.tv_sec = maxDelayTime/MILLION;
-    tv_timeToDelay.tv_usec = maxDelayTime%MILLION;
-  }
+  int selectResult;
+  do {
+    struct timeval tv_timeToDelay;
+    tv_timeToDelay.tv_sec = timeToDelay.seconds();
+    tv_timeToDelay.tv_usec = timeToDelay.useconds();
+    // Very large "tv_sec" values cause select() to fail.
+    // Don't make it any larger than 1 million seconds (11.5 days)
+    const long MAX_TV_SEC = MILLION;
+    if (tv_timeToDelay.tv_sec > MAX_TV_SEC) {
+      tv_timeToDelay.tv_sec = MAX_TV_SEC;
+    }
+    // Also check our "maxDelayTime" parameter (if it's > 0):
+    if (maxDelayTime > 0 &&
+        (tv_timeToDelay.tv_sec > (long)maxDelayTime/MILLION ||
+         (tv_timeToDelay.tv_sec == (long)maxDelayTime/MILLION &&
+       tv_timeToDelay.tv_usec > (long)maxDelayTime%MILLION))) {
+      tv_timeToDelay.tv_sec = maxDelayTime/MILLION;
+      tv_timeToDelay.tv_usec = maxDelayTime%MILLION;
+    }
   
-  int selectResult = select(fMaxNumSockets, &readSet, NULL, NULL,
+    readSet = fReadSet;
+    selectResult = select(fMaxNumSockets, &readSet, NULL, NULL,
                            &tv_timeToDelay);
+  }while(selectResult < 0 && errno==EINTR);
   if (selectResult < 0) {
 #if defined(__WIN32__) || defined(_WIN32)
     int err = WSAGetLastError();
